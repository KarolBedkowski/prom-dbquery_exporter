# sample database databases configuration
database:
  testdb:
    driver: sqlite
    # conenction parameters
    connection:
      database: rwr3.db
    # pool configuration
    pool:
      # max number of active connection; default 10
      max_connections: 2
      # xax number of idle connection; default 1
      max_idle_connections: 1
      # connection max life time
      conn_max_life_time: 600
    # additional labels that can be used in templates
    labels:
      env: test
    # initials query to run before any other queries
    initial_query:
      - select 1
    # default timeout for queries in second
    timeout: 1
  testdbpgsql:
    driver: postgres
    connection:
      # postgresql may be configured with separate parameters
      database: postgres
      host: localhost
      user: dbquery_exporter
      password: dbquery_exporter
      port: 5432
    pool:
      max_connections: 2
      max_idle_connections: 2
  testdbpgsql2:
    driver: postgres
    connection:
      # postgresql connection may use connect string; other parameters
      # are ignored
      connstr: postgres://dbquery_exporter:dbquery_exporter@localhost/postgres
    pool:
      max_connections: 2
      max_idle_connections: 2
  testtib:
    driver: tidb
    connection:
      database: test
      host: localhost
      user: root
      password:
      port: 4000
  testoracle:
    driver: oci8
    connection:
      database: test
      host: 127.0.0.1
      user: testuser
      password: testpass#1
      port: 1521
    initial_query:
      - alter session set default_schema=test

# queries configuration.
# query is not bind direct to any database
query:
  ping:
    # query can belong to some group and all queries in group can be executed
    # on request
    groups:
      - pg
      - oracle
    sql: select 1
    # use current database name
    metrics: |
      ping{database="{{ .Database }}"} 1

  testq1:
    sql: >
       select s.name, count(t.id) as cnt
       from sports s left join trips t on s.id = t.sport_id
       group by s.name
    # result of query is cached by 20 second
    caching_time: 20
    # timeout define query timeout in second
    timeout: 1
    # Rows from query are accessible via `conext.R` variable and should be
    # always iterate.
    # Labels defined on database level are available via `context.L map`.
    # Some other variables are available:
    # `.Count` - total number of query result
    # `.QueryDuration` - query duration in sec
    # `.QueryStartTime` - start query as unix time (time of execution, even cached)
    metrics: |
      {{ $top := . }}
      {{- range .R }}
      rwr3_sport_trip_count{sport="{{ .name }}", dbname="{{ $top.L.env }}"} {{ .cnt }}
      {{- end  }}
      rwr3_sport_trip_count_rows {{ .Count }}
      rwr3_sport_trip_query_secounds {{ .QueryDuration }}
      rwr3_sport_trip_last_query_unix {{ .QueryStartTime }}

  testq2:
    sql: >
       select count(t.id) as cnt from trips t

    metrics: |
      {{- range .R }}
      rwr3_trips_count {{ .cnt }}
      {{- end  }}
      rwr3_trips_count_rows {{ .Count }}
      rwr3_trips_query_secounds {{ .QueryDuration }}
      rwr3_trips_last_query_unix {{ .QueryStartTime }}

  testparam1:
    # Queries may use parameters delivered by request->query (ie ...&id=12)
    sql: >
      select count(t.id) as cnt from trips t where id > :id

    # Parameters are accessible via `context.P` map
    metrics: |
      {{ $top := . }}
      {{- range .R }}
      rwr3_trips_count_limited{limit="{{ $top.P.id }}"} {{ .cnt }}
      {{- end  }}

    params:
      id: 0

  pg_stats_activity_state:
    sql: >
      select COALESCE(state, '') as state, count(*) as cnt
      from pg_stat_activity group by state
    caching_time: 30
    metrics: |
      {{- range .R }}
      pg_stats_activity_state{state="{{ .state }}"} {{ .cnt }}
      {{- end }}

  pg_stat_database:
    groups:
      - pgstats
      - pg
    sql: >
      select COALESCE(psd.datname, '') AS datname, numbackends, xact_commit,
        xact_rollback, blks_read, blks_hit, tup_returned, tup_fetched,
        tup_inserted, tup_updated, tup_deleted, conflicts, temp_files,
        temp_bytes, deadlocks, blk_read_time, blk_write_time,
        CASE WHEN (psd.blks_hit + blks_read) > 0
          THEN (cast(psd.blks_hit AS float) / (psd.blks_hit + psd.blks_read))
          ELSE 1.0
        END as cache_hit_ratio,
        CASE WHEN (xact_commit + xact_rollback) > 0
          THEN (CAST(xact_commit AS float) / (xact_commit + xact_rollback))
          ELSE 1.0
        END as commit_ratio,
        pg_database_size(psd.datname) AS size
      from pg_stat_database psd
      JOIN pg_database pd ON pd.oid =  psd.datid
      WHERE not pd.datistemplate
    caching_time: 30
    metrics: |
      {{- range .R }}
      pg_stat_database_numbackends{name="{{.datname}}"} {{.numbackends}}
      pg_stat_database_xact_commit{name="{{.datname}}"} {{.xact_commit}}
      pg_stat_database_xact_rollback{name="{{.datname}}"} {{.xact_rollback}}
      pg_stat_database_blks_read{name="{{.datname}}"} {{.blks_read}}
      pg_stat_database_blks_hit{name="{{.datname}}"} {{.blks_hit}}
      pg_stat_database_tup_returned{name="{{.datname}}"} {{.tup_returned}}
      pg_stat_database_tup_fetched{name="{{.datname}}"} {{.tup_fetched}}
      pg_stat_database_tup_inserted{name="{{.datname}}"} {{.tup_inserted}}
      pg_stat_database_tup_updated{name="{{.datname}}"} {{.tup_updated}}
      pg_stat_database_tup_deleted{name="{{.datname}}"} {{.tup_deleted}}
      pg_stat_database_conflicts{name="{{.datname}}"} {{.conflicts}}
      pg_stat_database_temp_files{name="{{.datname}}"} {{.temp_files}}
      pg_stat_database_temp_bytes{name="{{.datname}}"} {{.temp_bytes}}
      pg_stat_database_deadlocks{name="{{.datname}}"} {{.deadlocks}}
      pg_stat_database_blk_read_time{name="{{.datname}}"} {{.blk_read_time}}
      pg_stat_database_blk_write_time{name="{{.datname}}"} {{.blk_write_time}}
      pg_stat_database_cache_hit_ratio{name="{{.datname}}"} {{.cache_hit_ratio}}
      pg_stat_database_commit_ratio{name="{{.datname}}"} {{.commit_ratio}}
      pg_database_size{name="{{.datname}}"} {{.size}}
      {{- end }}

  pg_stat_database_conflicts:
    groups:
      - pgstats
    sql: >
      SELECT psdc.datname, confl_tablespace, confl_lock, confl_snapshot,
        confl_bufferpin, confl_deadlock
      from pg_stat_database_conflicts psdc
      JOIN pg_database pd ON pd.oid =  psdc.datid
      WHERE not pd.datistemplate
    caching_time: 60
    metrics: |
      {{- range .R }}
      pg_stat_database_conflicts{name="{{.datname}}", conf="tablespace"} {{.confl_tablespace}}
      pg_stat_database_conflicts{name="{{.datname}}", conf="lock"} {{.confl_lock}}
      pg_stat_database_conflicts{name="{{.datname}}", conf="snapshot"} {{.confl_snapshot}}
      pg_stat_database_conflicts{name="{{.datname}}", conf="bufferpin"} {{.confl_bufferpin}}
      pg_stat_database_conflicts{name="{{.datname}}", conf="deadlock"} {{.confl_deadlock}}
      {{- end }}

  tidb_test:
    sql: >
      select id, aa from test

    metrics: |
      {{- range .R }}
      tidb_test{key="{{ .aa }}"} {{ .id }}
      {{- end }}

  oracle_v_sysmetric:
    groups:
      - oracle
    sql: >
       select metric_name as name, to_char(value) as value
       from V$SYSMETRIC
       where GROUP_ID=2
    caching_time: 10

    # some additional functions may be used for preparing result
    metrics: |
      {{- range .R }}
      oracle_v_sysmetric_{{ .NAME | keepAlfaNumUnderlineSpace | trim | replaceSpaces | toLower }} {{ .VALUE }}
      {{- end  }}
